apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {  //this one may not be needed. But wont hurt.
        androidTest.setRoot('src/androidTest')
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    task.exclude '**/BuildConfig.class'
    task.exclude '**/R.class'
    task.exclude '**/R$*.class'
    artifacts.add('archives', task);
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.just.agentweb:agentweb:4.0.3-alpha@aar'
    implementation 'com.just.agentweb:filechooser:4.0.3-alpha@aar'
    implementation 'com.just.agentweb:download:4.0.3-alpha@aar'
    implementation 'com.github.Justson:Downloader:v4.0.3'
    implementation 'com.lzy.net:okgo:3.0.4'
    implementation 'com.qianwen:okhttp-utils:3.8.0'
    implementation 'com.tbruyelle.rxpermissions:rxpermissions:0.9.4@aar'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'com.alibaba:fastjson:1.2.37'
    // LeanCloud 基础包
    api ('cn.leancloud.android:avoscloud-sdk:4.7.14')
    // 推送与即时通讯需要的包
    api ('cn.leancloud.android:avoscloud-push:4.7.14@aar'){transitive = true}
    testImplementation 'org.robolectric:robolectric:3.1.4'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    implementation files('libs/universal-image-loader-1.9.5.jar')
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}


publishing {
    publications {
        aar(MavenPublication) {
            //记住一下规则,等会导入时注意, 举例compile 'com.dz.bleota:bleota:1.0.0'
            groupId 'com.sj.mymodule'//包名
            artifactId 'mymodule'
            version '1.0.0'//版本
            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            //同时记录该依赖库所依赖的其他远程依赖
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            //仓库存放在项目根目录
            url("file://" + project.rootDir.absolutePath + "/repository")
        }
    }
}
